#!/bin/bash

# Start tracking time
START="$(date +"%s")"

# Common script
source "$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" || return; pwd)/common"

# Parameters
while [[ "${#}" -ge 1 ]]; do
    case "${1}" in
        "-r"|"--rom")
            shift && enforce_value "${@}"
            ROM="${1}" ;;

        "-d"|"--device")
            shift && enforce_value "${@}"
            DEVICE="${1}" ;;

        "-g"|"--gdrive")
            GDRIVE=true ;;

        "-ak2"|"--anykernel2")
            ANYKERNEL=true ;;

        *) die "Invalid parameter specified!" ;;
    esac

    shift
done

# Default parameters
[[ -z "${ROM}" ]] && ROM="abc"
[[ -z "${DEVICE}" ]] && DEVICE="chiron"

# Check ROM
if [[ "${ROM}" != "abc" && "${ROM}" != "aosip" ]]
then
  die "Only ABC and AOSIP are supported!"
fi

# Build dirs
ROM_PATH="${HOME}/${ROM}"
BUILD_PATH="${ROM_PATH}/out/target/product/${DEVICE}"
export COMPILED_IMAGE="${BUILD_PATH}/kernel"

# Anykernel
export AK2_PATH="${HOME}/linux/ak2-${DEVICE}"
KERNEL_NAME="PlaceholderKernel"
ZIPNAME="${KERNEL_NAME}-${DEVICE}-${DATE}.zip"

# Setup environment
info "Setting up build environment"
cd "${ROM_PATH}" || die "ROM dir doesn't exist!"
source "${ROM_PATH}/build/envsetup.sh"

# Set the device
info "Setting up the device..."
if [ "${ROM}" == "abc" ]
then
  breakfast "${DEVICE}-userdebug"
elif [ "${ROM}" == "aosip" ]
then
  lunch "aosip_${DEVICE}-userdebug"
fi

# Start compilation with log
info "Starting build kernel for ${DEVICE} and saving a build log file"
rm -f "${BUILD_PATH}/{boot.img,kernel}"
mka bootimage 2>&1 | tee "${HOME}/logs/buildromkernel.log"

# If the above was successful
if [[ -f "${BUILD_PATH}/boot.img" ]]
then
  # Go anykernel
  if [[ -n "${ANYKERNEL}" ]]
  then
    info "Adding kernel to AnyKernel2"
    zip_ak2
  fi
  # Google Drive upload
  if [[ -n "${GDRIVE}" ]]
  then
    info "Uploading stuffs to Google Drive"
    if [[ -n "${ANYKERNEL}" ]]
    then
      gdrive upload "${AK2_PATH}/${ZIPNAME}"
    else
      gdrive upload "${BUILD_PATH}/boot.img"
    fi
  fi
  success "Build successful"
# If the build failed
else
  failed "Build failed"
fi

# Stop tracking time
END="$(date +"%s")"
info "Build time: $(format_time "${START}" "${END}")"
