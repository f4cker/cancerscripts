#!/bin/bash

# Setup compiler stuff
export USE_CCACHE=1
/usr/bin/ccache -M 50G

# Colors
BLINK_RED="\\033[05;31m"
BLUE="\\033[01;34m"
# BOLD="\\033[1m"
GRN="\\033[01;32m"
RED="\\033[01;31m"
RST="\\033[0m"
# YLW="\\033[01;33m"

# Export username for android props
# KBUILD_BUILD_USER is set in .bashrc
export USER="${KBUILD_BUILD_USER}"

# Current date for all scripts
DATE="$(date +'%Y%m%d')"

# Shellcheck, are you satisfied now?
export CCACHE JOBS_FLAG DATE

# Make threads
THREADS="$(($(nproc --all) + 1))"
JOBS_FLAG="-j${THREADS}"

# Common ccache variable
CCACHE=$(command -v ccache)

# Alias for echo to print escape codes
function echo() {
    command echo -e "${@}"
}

# Prints an error in bold red and exits the script
die() { echo "${RED}${1}${RST}" 1>&2; exit 1; }

# Prints an info message in bold blue
info() { echo "${BLUE}${1}${RST}" 1>&2; }

# Prints a success message in bold green
success() { echo "${GRN}${1}${RST}" 1>&2; }

# Prints a failed message in bold blinking red
failed() { echo "${BLINK_RED}${1}${RST}" 1>&2; }

# Function for zipping Anykernel2
zip_ak2(){
    mv -f "${COMPILED_IMAGE}" "${AK2_PATH}/Image.gz-dtb"
    cd "${AK2_PATH}" || die "Anykernel2 folder doesn't exist!"
    zip -r9 "${ZIPNAME}" ./* -x "README.md" -x "./*.zip"
}

# Uploads a document to a Telegram chat
# Token should be exported from .bashrc
if [[ -z "${TOKEN}" ]]; then
    die "How can u use telegram bot without token?"
fi
if [[ -z "${CHATID}" ]]; then
    die "Who you gonna call?"
fi
telegram_notify() {
curl -s https://api.telegram.org/bot"${TOKEN}"/sendMessage -d text="${1}" -d chat_id="${CHATID}" >> /dev/null
}
telegram_upload() {
curl -s https://api.telegram.org/bot"${TOKEN}"/sendDocument -F document=@"${1}" -F chat_id="${CHATID}" >> /dev/null
}

# Changelog for specified repo (last week)
generate_changelog() {
    info "Generating changelog"
    cd "${1}" || die "Repo doesn't exist"
    if [[ -f "${CHANGELOG_PATH}" ]]
    then
        rm -f "${CHANGELOG_PATH}"
    fi
    for i in $(seq 7)
    do
        AFTER="$(date --date="${i} days ago" +%F)"
        UNTIL="$(date --date="$((i -1)) days ago" +%F)"
        {
            echo "####################"
            echo "     ${AFTER}"
            echo "####################"
            git log --after="${AFTER}" --until="${UNTIL}" --pretty=tformat:"%h  %s  [%an]"
            echo ""
        } >> "${CHANGELOG_PATH}"
    done
}

# Formats the time for the end
function format_time() {
    MINS="$(((${2} - ${1}) / 60))"
    SECS="$(((${2} - ${1}) % 60))"
    if [[ "${MINS}" -ge 60 ]]; then
        HOURS="$((MINS / 60))"
        MINS="$((MINS % 60))"
    fi

    if [[ "${HOURS}" -eq 1 ]]; then
        TIME_STRING+="1 HOUR, "
    elif [[ "${HOURS}" -ge 2 ]]; then
        TIME_STRING+="${HOURS} HOURS, "
    fi

    if [[ "${MINS}" -eq 1 ]]; then
        TIME_STRING+="1 MINUTE"
    else
        TIME_STRING+="${MINS} MINUTES"
    fi

    if [[ "${SECS}" -eq 1 && -n "${HOURS}" ]]; then
        TIME_STRING+=", AND 1 SECOND"
    elif [[ "${SECS}" -eq 1 && -z "${HOURS}" ]]; then
        TIME_STRING+=" AND 1 SECOND"
    elif [[ "${SECS}" -ne 1 && -n "${HOURS}" ]]; then
        TIME_STRING+=", AND ${SECS} SECONDS"
    elif [[ "${SECS}" -ne 1 && -z "${HOURS}" ]]; then
        TIME_STRING+=" AND ${SECS} SECONDS"
    fi

    echo "${TIME_STRING}"
}


setup_romenv() {
# Build dirs
export ROM_PATH="${HOME}/${ROM}"

# Check ROM
if [[ "${ROM}" != "abc" && "${ROM}" != "aosip" ]]
then
  die "Only ABC and AOSIP are supported!"
fi

# Setup environment
info "Setting up build environment"
cd "${ROM_PATH}" || die "ROM dir doesn't exist!"
source "${ROM_PATH}/build/envsetup.sh"

# Set the device
info "Setting up the device..."
if [ "${ROM}" == "abc" ]
then
  breakfast "${DEVICE}-userdebug"
elif [ "${ROM}" == "aosip" ]
then
  lunch "aosip_${DEVICE}-userdebug"
fi
}

# Enforces the value needed for two-part flags
function enforce_value() {
    [[ "${#}" -lt 1 ]] && die "A additional value is needed for one of the flags passed to this script!"
}

# Add trap for catching Ctrl-C
trap 'echo; die "Manually aborted!"' SIGINT SIGTERM
