#!/bin/bash

# Setup compiler stuff
export USE_CCACHE=1
/usr/bin/ccache -M 50G

# Colors
# BLINK_RED="\\033[05;31m"
BLUE="\\033[01;34m"
# BOLD="\\033[1m"
GRN="\\033[01;32m"
RED="\\033[01;31m"
RST="\\033[0m"
YLW="\\033[01;33m"

# Export username for android props
# KBUILD_BUILD_USER is set in .bashrc
export USER="${KBUILD_BUILD_USER}"

# Current date for all scripts
DATE="$(date +'%Y%m%d')"

# Shellcheck, are you satisfied now?
export CCACHE JOBS_FLAG DATE

# Make threads
THREADS="$(($(nproc --all) + 1))"
JOBS_FLAG="-j${THREADS}"

# Common ccache variable
CCACHE=$(command -v ccache)

######################
##  ECHO FUNCTIONS  ##
######################

# Alias for echo to print escape codes
function echo()
{
  command echo -e "${@}"
}

# Prints a formatted info to point out what is being done to the user
function header()
{
  echo "${2}====$(for i in $(seq ${#1}); do echo "=\\c"; done)===="
  echo "==  ${1}  =="
  echo "====$(for i in $(seq ${#1}); do echo "=\\c"; done)====${RST}"
}

# Prints an error in bold red and exits the script
function die() { echo "${RED}${1}${RST}" 1>&2; exit 1; }

# Prints an info message in bold blue
function info() { echo "${BLUE}${1}${RST}" 1>&2; }

# Prints a success message in bold green
function warn() { echo "${YLW}${1}${RST}" 1>&2; }

#########################
##  VERBOSE FUNCTIONS  ##
#########################

# Start script with formatted message
function startscript()
{
  START="$(date +"%s")" && header "BUILD STARTED!" "${GRN}"
}

# End script with formatted message and build time
function endscript()
{
  if checkoutput; then header "BUILD COMPLETED!" "${GRN}"; else header "BUILD FAILED!" "${RED}"; fi
  END="$(date +"%s")"
  info "BUILD TIME: $(format_time "${START}" "${END}")"
  if [[ -n "${POWEROFF}" ]]
  then
    poweroff || sudo poweroff
  fi
}

# Formats the time for the end
function format_time()
{
  MINS="$(((${2} - ${1}) / 60))"
  SECS="$(((${2} - ${1}) % 60))"
  if [[ "${MINS}" -ge 60 ]]
  then
    HOURS="$((MINS / 60))"
    MINS="$((MINS % 60))"
  fi

  if [[ "${HOURS}" -eq 1 ]]
  then
    TIME_STRING+="1 HOUR, "
  elif [[ "${HOURS}" -ge 2 ]]
  then
    TIME_STRING+="${HOURS} HOURS, "
  fi

  if [[ "${MINS}" -eq 1 ]]
  then
    TIME_STRING+="1 MINUTE"
  else
    TIME_STRING+="${MINS} MINUTES"
  fi

  if [[ "${SECS}" -eq 1 && -n "${HOURS}" ]]
  then
    TIME_STRING+=", AND 1 SECOND"
  elif [[ "${SECS}" -eq 1 && -z "${HOURS}" ]]
  then
    TIME_STRING+=" AND 1 SECOND"
  elif [[ "${SECS}" -ne 1 && -n "${HOURS}" ]]
  then
    TIME_STRING+=", AND ${SECS} SECONDS"
  elif [[ "${SECS}" -ne 1 && -z "${HOURS}" ]]
  then
    TIME_STRING+=" AND ${SECS} SECONDS"
  fi

  echo "${TIME_STRING}"
}

# Changelog for specified repo (last week)
function generate_changelog()
{
  if [[ -n "${CHANGELOG}" ]]
  then
    cd "${1}" || die "Repo doesn't exist"
    if [[ -f "${CHANGELOG_PATH}" ]]
    then
      rm -f "${CHANGELOG_PATH}"
    fi
    for i in $(seq 7)
    do
      AFTER="$(date --date="${i} days ago" +%F)"
      UNTIL="$(date --date="$((i -1)) days ago" +%F)"
      {
        echo "####################"
        echo "     ${AFTER}"
        echo "####################"
        git log --after="${AFTER}" --until="${UNTIL}" --pretty=tformat:"%h  %s  [%an]"
        echo ""
      } >> "${CHANGELOG_PATH}"
    done
  fi
}

# Add trap for catching Ctrl-C
trap 'echo; die "Manually aborted!"' SIGINT SIGTERM

#############################
##  COMPILATION FUNCTIONS  ##
#############################

# Enforces the value needed for two-part flags
function enforce_value()
{
  [[ "${#}" -lt 1 ]] && die "A additional value is needed for one of the flags passed to this script!"
}

function romenviroment()
{
  info "Setting up build environment"

  # Build dirs
  export ROM_PATH="${HOME}/${ROM}"
  export BUILD_PATH="${ROM_PATH}/out/target/product/${DEVICE}"

  # Check ROM
  if [[ "${ROM}" != "abc" && "${ROM}" != "aosip" ]]
  then
    die "Only ABC and AOSIP are supported!"
  fi

  # Setup environment
  cd "${ROM_PATH}" || die "ROM dir doesn't exist!"
  source "${ROM_PATH}/build/envsetup.sh"

  # Set the device
  info "Setting up the device..."
  if [ "${ROM}" == "abc" ]
  then
    breakfast "${DEVICE}-userdebug"
  elif [ "${ROM}" == "aosip" ]
  then
    LANG="" LC_ALL=C lunch "aosip_${DEVICE}-userdebug"
  fi
}

#  Zipping AnyKernel2
function ramdisk()
{
  # Common paths
  AK2_PATH="${HOME}/linux/ak2-${DEVICE}"
  KERNEL_NAME="PlaceholderKernel"
  OUTPUT="${AK2_PATH}/${KERNEL_NAME}-${DEVICE}-${DATE}.zip"

  # Move kernel image specified in kernel compilation script
  info "Moving kernel image to AnyKernel2 folder..."
  mv -f "${COMPILED_IMAGE}" "${AK2_PATH}/Image.gz-dtb"

  # Create flashable AnyKernel2 zip
  cd "${AK2_PATH}" || die "AnyKernel2 folder doesn't exist!"
  zip -r9 "${OUTPUT}" ./* -x "README.md" -x "./*.zip"
}

# Check if compilation output exists
function checkoutput()
{
  for i in $(seq 0 "$(("${#OUTPUT[@]}"-1))")
  do
    [[ -f "${OUTPUT[${i}]}" ]] || break
  done && return
  false
}

########################
##  UPLOAD FUNCTIONS  ##
########################

# Notify Telegram chat about smth
function telegram_notify()
{
  curl -s https://api.telegram.org/bot"${TOKEN}"/sendMessage -d parse_mode="Markdown" -d text="${1}" -d chat_id="${CHATID}" >> /dev/null
}

# Upload file to Telegram chat
function telegram_upload()
{
  curl -s https://api.telegram.org/bot"${TOKEN}"/sendDocument -F document=@"${1}" -F chat_id="${CHATID}" >> /dev/null
}

# Checks which upload source is specified
function output_upload()
{
  [[ "${BUILDTYPE}" == "personal" ]] && CHATID="${PM}"
  FILENAME="$( basename "${1}" )"
  if [[ -n "${TELEGRAM}" ]]
  then
    [[ -z "${TOKEN}" || -z "${CHATS}" ]]
    warn "File can't be uploaded to Telegram, bot token and chat id are not specified!"
  fi
  if [[ "${BUILDTYPE}" == "test" || "${BUILDTYPE}" == "personal" ]]
  then
    if [[ "${FILENAME,,}" ==  "${ROM}-"* ]]
    then
      info "Uploading ${FILENAME} to cergo666.tk..." && curl -T "${1}" -u "${FTPLOGPASS}" ftp://cergo666.tk/"$( basename "${1}" )"
      telegram_notify "${FILENAME} can be downloaded [here](http://cergo666.tk/wight554/$( basename "${1}" ))"
    else
      telegram_notify "${FILENAME} is ready, uploading!"
      info "Uploading ${FILENAME} to Telegram..." && telegram_upload "${1}"
    fi
  elif [[ "${BUILDTYPE}" == "release" && "${FILENAME,,}" == "abc-"* ]]
  then
    rsync -av -e ssh "${1}" wight554@web.sourceforge.net:/home/frs/project/abc-rom/"${DEVICE}"
    telegram_notify "Release build ${FILENAME} can be downloaded [here](home/frs/project/abc-rom/${DEVICE}/$( basename "${1}" ))"
  fi
}

function changelog_upload()
{
  if [[ -f "${1}" ]]
  then
    [[ "${ROM}" != "aosip" || "${FILENAME,,}" == "abc-"* && "${BUILDTYPE}" != "personal" ]] && info "Uploading changelog to Telegram..." && telegram_upload "${1}"
    [[ "${BUILDTYPE}" == "release" && "${FILENAME,,}" == "abc-"* ]] && rsync -av -e ssh "${1}" wight554@web.sourceforge.net:/home/frs/project/abc-rom/"${DEVICE}" && telegram_notify "Changelog can be downloaded [here](home/frs/project/abc-rom/${DEVICE}/$( basename "${1}" ))"
  fi
}

# Uploads all the things to specified place
function upload() {
  # Check if everything is fine
  if checkoutput
  then
    for FILE in "${OUTPUT[@]}"
    do
      output_upload "${FILE}"
    done
    changelog_upload "${CHANGELOG_PATH}"
  fi
}
