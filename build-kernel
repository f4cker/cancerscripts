#!/bin/bash

# Gather parameters
function parse_parameters()
{
  while [[ "${#}" -ge 1 ]]; do
    case "${1}" in
      "-d"|"--device")
        shift && enforce_value "${@}"
        DEVICE="${1}" ;;

      "-t"|"--toolchain")
        shift && enforce_value "${@}"
        TOOLCHAIN="${1}" ;;

      "-c"|"--changelog")
        export CHANGELOG=true ;;

      "-g"|"--gdrive")
        export GDRIVE=true ;;

      "-tg"|"--telegram")
        export TELEGRAM=true ;;

      "-C"|"--clean")
        CLEAN=true ;;

      *) die "Invalid parameter specified!" ;;
    esac
    shift
done
  # Default parameters
  [[ -z "${DEVICE}" ]] && DEVICE="chiron"
  [[ -z "${TOOLCHAIN}" ]] && TOOLCHAIN="clang"
}

function enviroment()
{
  info "Setting up build enviroment.."
  sleep 1

  # Check TC
  if [[ "${TOOLCHAIN}" != "clang" && "${TOOLCHAIN}" != "gcc" ]]
  then
    die "Dafuq u wanna build with?"
  fi

  # Build dirs
  KERNEL_DIR="${HOME}/linux/${DEVICE}"
  BUILD_DIR="${HOME}/linux/build-${DEVICE}"
  [[ ! -d "${BUILD_DIR}" ]] && warn "Build directory doesn't exist..."; mkdir -p "${BUILD_DIR}";

  # Defconfig
  DEFCONFIG="${DEVICE}_defconfig"

  # COMPILED_IMAGE
  export COMPILED_IMAGE="${BUILD_DIR}/arch/arm64/boot/Image.gz-dtb"

  # Changelog
  export CHANGELOG_PATH="${HOME}/changelogs/Changelog-${DEVICE}-${DATE}.txt"

  # GCC paths variables
  GCC_FOLDER="${HOME}/toolchains/gnu-gcc-8.x"
  GCC="$(find "${GCC_FOLDER}/bin" \( -type f -o -type l \) -name '*-gcc' | head -n1)"
  CC="${GCC%gcc}"

  # Clang paths variables
  CLANG_FOLDER="${HOME}/toolchains/own-clang-7.x/"
  CLANG="${CLANG_FOLDER}/bin/clang"
  CLANG_VERSION="$(${CLANG} --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//')"

  # Optimizations (clang only)
  if [ "${TOOLCHAIN}" == "clang" ]
  then
    KCFLAGS="-mllvm -polly \
      -mllvm -polly-run-dce \
      -mllvm -polly-run-inliner \
      -mllvm -polly-opt-fusion=max \
      -mllvm -polly-ast-use-context \
      -mllvm -polly-vectorizer=stripmine \
      -mllvm -polly-detect-keep-going"
  fi
}
function clean()
{
  # Cleanup build directory if needed otherwise clean dtb only
  if [[ -n "${CLEAN}" ]]
  then
    info "Cleaning build directory..."
    rm -rf "${BUILD_DIR}" && mkdir -p "${BUILD_DIR}"
  else
    info "Cleaning DTBs directory..."
    sleep 1
    rm -rf "${BUILD_DIR}/arch/arm64/boot/dts/qcom/"
  fi
}

function buildkernel()
{
  # Open kernel directory
  cd "${KERNEL_DIR}" || die "Kernel directory doesn't exist!"
  info "Compiling kernel..."
  # Generate defconfig
  make -s ARCH="arm64" O="${BUILD_DIR}" "${DEFCONFIG}" "${JOBS_FLAG}"
  # Build kernel
  if [ "${TOOLCHAIN}" == "clang" ]
  then
    make O="${BUILD_DIR}" "${JOBS_FLAG}" \
		ARCH="arm64" \
		CC="${CCACHE} ${CLANG}" \
		CLANG_TRIPLE="aarch64-linux-gnu-" \
		KBUILD_COMPILER_STRING="${CLANG_VERSION}" \
		KCFLAGS="${KCFLAGS}" \
		CROSS_COMPILE="${CC}" \
		Image.gz-dtb
  elif [ "${TOOLCHAIN}" == "gcc" ]
  then
    make O="${BUILD_DIR}" "${JOBS_FLAG}" \
		ARCH="arm64" \
		CROSS_COMPILE="${CCACHE} ${CC}" \
		Image.gz-dtb
  fi
}

#####################
##  RUN THEM ALL!  ##
#####################

# Common script
source "$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" || return; pwd)/common"

# Print formatted message about build start
startscript

# Parse parameters and setup enviroment
parse_parameters "${@}"
enviroment

# Cleanup
clean

# Compile kernel image
buildkernel

# Make Anykernel2 zip
ramdisk

# Upload if needed
upload

# Print formatted message about script ending
endscript
