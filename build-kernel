#!/bin/bash

# Start tracking time
START="$(date +%s)"

# Common script
source "$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" || return; pwd)/common"

# Parameters
while [[ "${#}" -ge 1 ]]; do
    case "${1}" in
        "-d"|"--device")
            shift && enforce_value "${@}"
            DEVICE="${1}" ;;

        "-t"|"--toolchain")
            shift && enforce_value "${@}"
            TOOLCHAIN="${1}" ;;

        "-g"|"--gdrive")
            GDRIVE=true ;;

        *) die "Invalid parameter specified!" ;;
    esac

    shift
done

# Default parameters
[[ -z "${DEVICE}" ]] && DEVICE="chiron"
[[ -z "${TOOLCHAIN}" ]] && TOOLCHAIN="clang"

# Check TC
if [[ "${TOOLCHAIN}" != "clang" && "${TOOLCHAIN}" != "gcc" ]]
then
  die "Dafuq u wanna build with?"
fi

# Kenzo can not into clang
if [[ "${TOOLCHAIN}" == "clang" && "${DEVICE}" == "kenzo" ]]
then
  die "No clang for 3.10 plebs!"
elif [[ -z "${TOOLCHAIN}" && "${DEVICE}" == "kenzo" ]]
then
  TOOLCHAIN="gcc"
fi

# Build dirs
KERNEL_DIR="${HOME}/linux/${DEVICE}"
BUILD_DIR="${HOME}/linux/build-${DEVICE}"

# Anykernel
AK2_PATH="${HOME}/linux/ak2-${DEVICE}"
ZIPNAME="PlaceholderKernel-${DEVICE}-$(date +'%Y%m%d').zip"

# Defconfig
DEFCONFIG="${DEVICE}_defconfig"

# Use GCC 7 for kenzo (coz kanzur)
if [ "${DEVICE}" == "kenzo" ]
then
  GCC_FOLDER="${HOME}/toolchains/linaro-gcc-7.x"
else
  GCC_FOLDER="${HOME}/toolchains/gnu-gcc-8.x"
fi

# GCC paths variables
GCC="$(find "${GCC_FOLDER}/bin" \( -type f -o -type l \) -name '*-gcc' | head -n1)"
CC="${GCC%gcc}"

# Clang paths variables
CLANG_FOLDER="${HOME}/toolchains/own-clang-7.x/"
CLANG="${CLANG_FOLDER}/bin/clang"
CLANG_VERSION="$(${CLANG} --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//')"

# Optimizations (clang only)
if [ "${TOOLCHAIN}" == "clang" ]
then
  KCFLAGS="-mllvm -polly \
		       -mllvm -polly-run-dce \
		       -mllvm -polly-run-inliner \
		       -mllvm -polly-opt-fusion=max \
		       -mllvm -polly-ast-use-context \
		       -mllvm -polly-vectorizer=stripmine \
		       -mllvm -polly-detect-keep-going"
fi

# Start madness
cd "${KERNEL_DIR}"

# Generate defconfig
defconfig()
{
  rm -rf "${BUILD_DIR}/arch/arm64/boot/dts/qcom/"
  info "Generating defconfig"
  make -s ARCH="arm64" O="${BUILD_DIR}" "${DEFCONFIG}" "${JOBS_FLAG}"
}

# Build kernel
kernel()
{
  info "Compiling kernel"
  if [ "${TOOLCHAIN}" == "clang" ]
  then
    make O="${BUILD_DIR}" "${JOBS_FLAG}" \
		ARCH="arm64" \
		CC="${CLANG}" \
		CLANG_TRIPLE="aarch64-linux-gnu-" \
		KBUILD_COMPILER_STRING="${CLANG_VERSION}" \
		KCFLAGS="${KCFLAGS}" \
		CROSS_COMPILE="${CC}" \
		Image.gz-dtb
  elif [ "${TOOLCHAIN}" == "gcc" ]
  then
    make O="${BUILD_DIR}" "${JOBS_FLAG}" \
		ARCH="arm64" \
		CROSS_COMPILE="${CC}" \
		Image.gz-dtb
  fi
}

# Push kernel image and ramdisk to anykernel zip
ramdisk()
{
  cd "${BUILD_DIR}"
  COMPILED_IMAGE="arch/arm64/boot/Image.gz-dtb"
  if [[ -f "${COMPILED_IMAGE}" ]]
  then
    info "Adding kernel to AnyKernel2"
    zip_ak2
    # Google Drive upload
    if [[ -n "${GDRIVE}" ]]
    then
      info "Uploading zip to Google Drive"
      gdrive upload "${ZIPNAME}"
    fi
    success "Build competed!"
  else
    failed "Build failed!"
  fi
}

# Run them all
defconfig
kernel | tee "${HOME}/logs/buildkernel.log"
ramdisk

# Stop tracking time
END="$(date +%s)"
info "Build time: $(echo "$(("${END}"-"${START}"))" | awk '{print int($1/60)" minutes and "int($1%60)" seconds"}')"
