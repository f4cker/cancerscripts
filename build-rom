#!/bin/bash

# Gather parameters
function parse_parameters()
{
  while [[ "${#}" -ge 1 ]]; do
    case "${1}" in
      "-bt"|"--buildtype")
        shift && enforce_value "${@}"
        BUILDTYPE="${1}" ;;

      "-d"|"--device")
        shift && enforce_value "${@}"
        DEVICE="${1}" ;;

      "-r"|"--rom")
        shift && enforce_value "${@}"
        ROM="${1}" ;;

      "-o"|"--off")
        export POWEROFF=true ;;

      "-c"|"--clean")
        CLEAN=true ;;

      "-s"|"--sync")
        SYNC=true ;;

      *) die "Invalid parameter specified!" ;;
    esac
    shift
  done

  # Default parameters
  [[ -z "${ROM}" ]] && ROM="abc"
  [[ -z "${DEVICE}" ]] && DEVICE="chiron"
  [[ -z "${BUILDTYPE}" ]] && BUILDTYPE="personal"

  # Sanity checks
  [[ "${ROM}" == "abc" && "${BUILDTYPE}" != "personal" && "${BUILDTYPE}" != "test" && "${BUILDTYPE}" != "release" ]] && die "Choose build type between personal, release and test!"
  [[ "${ROM}" == "aosip" && "${BUILDTYPE}" != "personal" && "${BUILDTYPE}" != "test" ]] && die "Choose build type between personal and test!"
}

# Pretty small one
function sync()
{
  if [[ -n "${SYNC}" ]]
  then
    repo sync
  fi
}

# Go clean if needed, otherwise installclean
function clean()
{
  if [[ -n "${CLEAN}" ]]
  then
    info "Cleaning build directory..."
    make clobber
  else
    info "Clean not specified, go installclean..."
    make installclean
  fi
}

function buildrom()
{
  #  Start compilation
  info "Compiling ${ROM} for ${DEVICE}..."
  if [ "${ROM}" == "abc" ]
  then
    mka bacon 2>&1 | tee "${HOME}/logs/buildrom.log"
  elif [ "${ROM}" == "aosip" ]
  then
    time mka kronic 2>&1 | tee "${HOME}/logs/build.log"
  fi

  # Output files
  OUTPUT="$(find "${ROM_PATH}/out/target/product/${DEVICE}" -maxdepth 1 -iname "${ROM}*${DATE}*.zip" )"
  [ "${ROM}" == "abc" ]
  CHANGELOG_PATH="$(find "${ROM_PATH}/out/target/product/${DEVICE}" -maxdepth 1 -iname "Changelog*${DATE}*.txt" )"
  export OUTPUT CHANGELOG_PATH
}

#####################
##  RUN THEM ALL!  ##
#####################

# Common script
source "$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" || return; pwd)/common"

# If parameters are satisfied, print formatted message about build start
parse_parameters "${@}"
startscript

# Sync if needed
sync

# Setup enviroment
romenviroment

# Cleanup
clean

# Compile ROM
buildrom

# Upload if needed
upload

# Print formatted message about script ending
endscript
